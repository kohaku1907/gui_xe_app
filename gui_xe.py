# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui_xe.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtCore import QObject, pyqtSlot, QEventLoop, QPointF
from PyQt5.QtGui import QFont, QPainter
from PyQt5.QtPrintSupport import QPrinter, QPrintPreviewDialog, QPrintDialog
from PyQt5.QtWebEngineWidgets import QWebEnginePage
from PyQt5.QtWidgets import QInputDialog, QDialog, QProgressDialog, QProgressBar
from SqliteHelper import *
import datetime
import ast

font = QFont('Arial', 16)


class PrintHandler(QObject):
    def __init__(self, parent=None):
        super().__init__(parent)
        # self.m_page = None
        self.m_inPrintPreview = False
        self.waiting = False;
        self.m_page = QWebEnginePage();

    def setPage(self, data):
        self.setHtml(data)
        # self.m_page = page
        self.m_page.printRequested.connect(self.printPreview)
        self.m_page.loadFinished.connect(self.pageLoaded)

    def pageLoaded(self):
        print('webviewloaded')
        if (self.waiting):
            self.waiting = False
            return self.print()

    def setHtml(self, data):
        if type(data) == str:
            data = ast.literal_eval(data)
        ngay_tao = datetime.datetime.strptime(data[2], '%Y-%m-%d %H:%M:%S').strftime('%d/%m/%Y %H:%M:%S')
        html = f'''
           <style>
                    table {{margin-bottom: 10px;color: #000;border: 2px solid #000;font-size: 12px;}}
                    table,tr {{width: 100%;}}
                    td {{border: 1px solid #000;}}
                    td {{padding: 5px;}}
                    .bloder {{font-weight: bolder;}}
                
                </style>
                
                    <table>        
                        <tr style="font-size: 20px;text-align: center;">
                            <td>             
                               TNT <br/>
                               GAMING
                            </td>
                        </tr>
                        <tr style="font-size: 15px;">
                            <td>
                                GIỮ XE MIỄN PHÍ <br/>
                                * SỐ XE : {data[1]}<br/>
                                * NGÀY : {ngay_tao}        
                            </td>
                        </tr>
                    </table>
                
                
                <style type="text/css">
                    table {{ page-break-inside:auto;page-break-inside:avoid;    
                    @media print {{
                        footer {{page-break-after: always;}}
                      }}
                      
                    p {{margin: 0;padding: 0;margin-top: 5px;}}
                </style>
           '''
        self.m_page.setHtml(html)

    def parse_int_keys(dct):
        rval = dict()
        for key, val in dct.items():
            try:
                # Convert the key to an integer
                int_key = int(key)
                # Assign value to the integer key in the new dict
                rval[int_key] = val
            except ValueError:
                # Couldn't convert key to an integer; Use original key
                rval[key] = val
        return rval

    @pyqtSlot()
    def print(self):
        printer = QPrinter(QPrinter.HighResolution)
        dialog = QPrintDialog(printer, self.m_page.view())
        if dialog.exec_() != QDialog.Accepted:
            return
        self.printDocument(printer)

    @pyqtSlot()
    def printPreview(self):
        if not self.m_page:
            return
        if self.m_inPrintPreview:
            return
        self.m_inPrintPreview = True
        printer = QPrinter()
        preview = QPrintPreviewDialog(printer, self.m_page.view())
        preview.paintRequested.connect(self.printDocument)
        preview.exec()
        self.m_inPrintPreview = False

    @pyqtSlot(QPrinter)
    def printDocument(self, printer):
        loop = QEventLoop()
        result = False

        def printPreview(success):
            nonlocal result
            result = success
            loop.quit()

        progressbar = QProgressDialog(self.m_page.view())
        progressbar.setWindowTitle('In')
        progressbar.findChild(QProgressBar).setTextVisible(False)
        progressbar.setLabelText("Vui lòng chờ...")
        progressbar.setRange(0, 0)
        progressbar.show()
        progressbar.canceled.connect(loop.quit)
        self.m_page.print(printer, printPreview)
        loop.exec_()
        progressbar.close()
        if not result:
            painter = QPainter()
            if painter.begin(printer):
                font = painter.font()
                font.setPixelSize(20)
                painter.setFont(font)
                painter.drawText(QPointF(10, 25), "Could not generate print preview.")
                painter.end()


class EditButtonsWidget(QtWidgets.QWidget):
    editCalled = QtCore.pyqtSignal(str)

    def __init__(self, row, col, parent=None, ):
        super(EditButtonsWidget, self).__init__(parent)
        self.row = row
        self.col = col
        self.parent = parent
        btnPrint = QtWidgets.QPushButton('In')
        btnDelete = QtWidgets.QPushButton('Xóa')
        layout = QtWidgets.QHBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        layout.addWidget(btnPrint)
        layout.addWidget(btnDelete)
        self.setLayout(layout)
        btnDelete.clicked.connect(self.deleteBike)
        btnPrint.clicked.connect(self.printDialog)

    @QtCore.pyqtSlot()
    def getAllCellVal(self):
        itmVal = {}
        for col in range(0, 3):
            itm = self.parent.item(self.row, col).text()
            itmVal[col] = str(itm)
        if itmVal:
            self.editCalled.emit(str(itmVal))

    @QtCore.pyqtSlot()
    def deleteBike(self):
        xe_id = self.parent.item(self.row, 0).text()
        helper = SqliteHelper("gui_xe.db")
        helper.edit(f"DELETE FROM xe_gui WHERE id = {xe_id}")
        self.editCalled.emit("Deleted")

    @QtCore.pyqtSlot()
    def printDialog(self):
        itmVal = {}
        for col in range(0, 3):
            itm = self.parent.item(self.row, col).text()
            itmVal[col] = str(itm)
        if itmVal:
            self.editCalled.emit(str(itmVal))


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 618)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(22, 9, 391, 61))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.lineEdit.setFont(font)
        self.lineEdit.setMaxLength(16)
        self.lineEdit.setObjectName("lineEdit")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(420, 10, 101, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.printInstant)

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(420, 53, 101, 20))
        self.pushButton_2.setObjectName("pushButton_2")

        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(20, 81, 1081, 481))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)

        #self.dateEdit = QtWidgets.QDateEdit(self.centralwidget)
        #self.dateEdit.setGeometry(QtCore.QRect(390, 10, 181, 51))
        #self.dateEdit.setObjectName("dateEdit")
        #self.dateEdit.setCalendarPopup(True)

        #self.dateEdit_2 = QtWidgets.QDateEdit(self.centralwidget)
        #self.dateEdit_2.setGeometry(QtCore.QRect(210, 10, 181, 51))
        #self.dateEdit_2.setObjectName("dateEdit_2")
        #self.dateEdit_2.setCalendarPopup(True)

        # self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_2.setGeometry(QtCore.QRect(580, 10, 181, 51))
        # self.pushButton_2.setObjectName("pushButton_2")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1112, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.loaddata()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Gửi Xe TNT Gaming"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "Nhập số xe"))
        self.pushButton.setText(_translate("MainWindow", "In"))
        self.pushButton_2.setText(_translate("MainWindow", ">>>"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Số xe"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Ngày tạo"))
        header = self.tableWidget.horizontalHeader()
        stylesheet = "::section{Background-color:rgb(150,150,1)}"
        header.setStyleSheet(stylesheet)
        header.setMinimumSectionSize(100)
        self.tableWidget.setColumnHidden(0, True)
        self.tableWidget.setColumnWidth(1, 400)
        self.tableWidget.setColumnWidth(2, 150)
        self.tableWidget.setColumnWidth(3, 200)

    def openAddBikeDialog(self):
        text, ok = QInputDialog.getText(self.centralwidget, "Thêm xe", "Nhập số biển số xe")
        if ok and (len(text) != 0):
            self.addBike(str(text))

    def printInstant(self):
        so_xe = self.lineEdit.text()
        if len(so_xe) != 0:
            data = self.addBike(so_xe)
            if data:
                self.print(data)

    def addBike(self, so_xe):
        helper = SqliteHelper("gui_xe.db")
        helper.edit(f"INSERT INTO xe_gui (so_xe) VALUES ('{so_xe}')")
        self.loaddata()
        newId = helper.getLastRowId()
        data = helper.select(f"SELECT * FROM xe_gui WHERE id = {newId}")
        if len(data) > 0:
            return data[0]
        return False

    def actionBtnscallBack(self, values):
        if (values == "Deleted"):
            self.loaddata()
        else:
            self.print(values)

    def print(self, data):
        handler = PrintHandler()
        handler.setPage(data)
        handler.print()

    def printPreview(self, printer):
        self.veXeView.document().print_(printer)

    def loaddata(self):
        helper = SqliteHelper("gui_xe.db")
        bikes = helper.select("SELECT * FROM xe_gui ORDER BY ngay_tao DESC")

        row = 0
        self.tableWidget.setRowCount(len(bikes))
        for bike in bikes:
            self.tableWidget.setItem(row, 0, QtWidgets.QTableWidgetItem(str(bike[0])))
            self.tableWidget.setItem(row, 1, QtWidgets.QTableWidgetItem(bike[1]))
            self.tableWidget.setItem(row, 2, QtWidgets.QTableWidgetItem(bike[2]))

            buttonWid = EditButtonsWidget(row, 3, self.tableWidget)
            buttonWid.editCalled.connect(self.actionBtnscallBack)
            self.tableWidget.setCellWidget(row, 3, buttonWid)
            row = row + 1


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
